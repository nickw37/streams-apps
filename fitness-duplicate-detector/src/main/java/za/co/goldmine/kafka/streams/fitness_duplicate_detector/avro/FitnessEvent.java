/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Defines hypothetical Fitness Data */
@org.apache.avro.specific.AvroGenerated
public class FitnessEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6067246078083862663L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FitnessEvent\",\"namespace\":\"za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro\",\"doc\":\"Defines hypothetical Fitness Data\",\"fields\":[{\"name\":\"activityType\",\"type\":{\"type\":\"string\",\"arg.properties\":{\"options\":[\"Walking\",\"Running\",\"Cycling\",\"Swimming\"]}},\"doc\":\"Summary of data\"},{\"name\":\"startTimeInSeconds\",\"type\":{\"type\":\"long\",\"arg.properties\":{\"range\":{\"min\":1487715775521,\"max\":1519273364600}}}},{\"name\":\"averageHeartRateInBeatsPerMinute\",\"type\":{\"type\":\"double\",\"arg.properties\":{\"range\":{\"min\":50,\"max\":200}}}},{\"name\":\"activeKilocalories\",\"type\":{\"type\":\"int\",\"arg.properties\":{\"range\":{\"min\":1,\"max\":200}}}},{\"name\":\"distanceInMeters\",\"type\":{\"type\":\"double\",\"arg.properties\":{\"range\":{\"min\":1,\"max\":10000}}},\"doc\":\"A simulated distance\"},{\"name\":\"durationInSeconds\",\"type\":{\"type\":\"int\",\"arg.properties\":{\"range\":{\"min\":1,\"max\":10000}}},\"doc\":\"Simulated Time\"},{\"name\":\"steps\",\"type\":{\"type\":\"int\",\"arg.properties\":{\"range\":{\"min\":5,\"max\":100000}}},\"doc\":\"A simulated number of steps\"},{\"name\":\"floorsClimbed\",\"type\":{\"type\":\"int\",\"arg.properties\":{\"range\":{\"min\":1,\"max\":20}}},\"doc\":\"Simulated number of floors climbed\"},{\"name\":\"manufacturerName\",\"type\":{\"type\":\"string\",\"arg.properties\":{\"options\":[\"Garmin\",\"Fitbit\",\"Samsung\",\"Polar\",\"Apple\"]}},\"doc\":\"Name of upload device\"},{\"name\":\"userid\",\"type\":{\"type\":\"string\",\"arg.properties\":{\"regex\":\"User_[1-9]{0,1}\"}},\"doc\":\"The simulated user who sent the fitness data\"},{\"name\":\"tenant_id\",\"type\":{\"type\":\"int\",\"arg.properties\":{\"range\":{\"min\":1,\"max\":20}}},\"doc\":\"The simulated tenant id\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FitnessEvent> ENCODER =
      new BinaryMessageEncoder<FitnessEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FitnessEvent> DECODER =
      new BinaryMessageDecoder<FitnessEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FitnessEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FitnessEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FitnessEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FitnessEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FitnessEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FitnessEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FitnessEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FitnessEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Summary of data */
   private java.lang.CharSequence activityType;
   private long startTimeInSeconds;
   private double averageHeartRateInBeatsPerMinute;
   private int activeKilocalories;
  /** A simulated distance */
   private double distanceInMeters;
  /** Simulated Time */
   private int durationInSeconds;
  /** A simulated number of steps */
   private int steps;
  /** Simulated number of floors climbed */
   private int floorsClimbed;
  /** Name of upload device */
   private java.lang.CharSequence manufacturerName;
  /** The simulated user who sent the fitness data */
   private java.lang.CharSequence userid;
  /** The simulated tenant id */
   private int tenant_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FitnessEvent() {}

  /**
   * All-args constructor.
   * @param activityType Summary of data
   * @param startTimeInSeconds The new value for startTimeInSeconds
   * @param averageHeartRateInBeatsPerMinute The new value for averageHeartRateInBeatsPerMinute
   * @param activeKilocalories The new value for activeKilocalories
   * @param distanceInMeters A simulated distance
   * @param durationInSeconds Simulated Time
   * @param steps A simulated number of steps
   * @param floorsClimbed Simulated number of floors climbed
   * @param manufacturerName Name of upload device
   * @param userid The simulated user who sent the fitness data
   * @param tenant_id The simulated tenant id
   */
  public FitnessEvent(java.lang.CharSequence activityType, java.lang.Long startTimeInSeconds, java.lang.Double averageHeartRateInBeatsPerMinute, java.lang.Integer activeKilocalories, java.lang.Double distanceInMeters, java.lang.Integer durationInSeconds, java.lang.Integer steps, java.lang.Integer floorsClimbed, java.lang.CharSequence manufacturerName, java.lang.CharSequence userid, java.lang.Integer tenant_id) {
    this.activityType = activityType;
    this.startTimeInSeconds = startTimeInSeconds;
    this.averageHeartRateInBeatsPerMinute = averageHeartRateInBeatsPerMinute;
    this.activeKilocalories = activeKilocalories;
    this.distanceInMeters = distanceInMeters;
    this.durationInSeconds = durationInSeconds;
    this.steps = steps;
    this.floorsClimbed = floorsClimbed;
    this.manufacturerName = manufacturerName;
    this.userid = userid;
    this.tenant_id = tenant_id;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return activityType;
    case 1: return startTimeInSeconds;
    case 2: return averageHeartRateInBeatsPerMinute;
    case 3: return activeKilocalories;
    case 4: return distanceInMeters;
    case 5: return durationInSeconds;
    case 6: return steps;
    case 7: return floorsClimbed;
    case 8: return manufacturerName;
    case 9: return userid;
    case 10: return tenant_id;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: activityType = (java.lang.CharSequence)value$; break;
    case 1: startTimeInSeconds = (java.lang.Long)value$; break;
    case 2: averageHeartRateInBeatsPerMinute = (java.lang.Double)value$; break;
    case 3: activeKilocalories = (java.lang.Integer)value$; break;
    case 4: distanceInMeters = (java.lang.Double)value$; break;
    case 5: durationInSeconds = (java.lang.Integer)value$; break;
    case 6: steps = (java.lang.Integer)value$; break;
    case 7: floorsClimbed = (java.lang.Integer)value$; break;
    case 8: manufacturerName = (java.lang.CharSequence)value$; break;
    case 9: userid = (java.lang.CharSequence)value$; break;
    case 10: tenant_id = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'activityType' field.
   * @return Summary of data
   */
  public java.lang.CharSequence getActivityType() {
    return activityType;
  }


  /**
   * Sets the value of the 'activityType' field.
   * Summary of data
   * @param value the value to set.
   */
  public void setActivityType(java.lang.CharSequence value) {
    this.activityType = value;
  }

  /**
   * Gets the value of the 'startTimeInSeconds' field.
   * @return The value of the 'startTimeInSeconds' field.
   */
  public long getStartTimeInSeconds() {
    return startTimeInSeconds;
  }


  /**
   * Sets the value of the 'startTimeInSeconds' field.
   * @param value the value to set.
   */
  public void setStartTimeInSeconds(long value) {
    this.startTimeInSeconds = value;
  }

  /**
   * Gets the value of the 'averageHeartRateInBeatsPerMinute' field.
   * @return The value of the 'averageHeartRateInBeatsPerMinute' field.
   */
  public double getAverageHeartRateInBeatsPerMinute() {
    return averageHeartRateInBeatsPerMinute;
  }


  /**
   * Sets the value of the 'averageHeartRateInBeatsPerMinute' field.
   * @param value the value to set.
   */
  public void setAverageHeartRateInBeatsPerMinute(double value) {
    this.averageHeartRateInBeatsPerMinute = value;
  }

  /**
   * Gets the value of the 'activeKilocalories' field.
   * @return The value of the 'activeKilocalories' field.
   */
  public int getActiveKilocalories() {
    return activeKilocalories;
  }


  /**
   * Sets the value of the 'activeKilocalories' field.
   * @param value the value to set.
   */
  public void setActiveKilocalories(int value) {
    this.activeKilocalories = value;
  }

  /**
   * Gets the value of the 'distanceInMeters' field.
   * @return A simulated distance
   */
  public double getDistanceInMeters() {
    return distanceInMeters;
  }


  /**
   * Sets the value of the 'distanceInMeters' field.
   * A simulated distance
   * @param value the value to set.
   */
  public void setDistanceInMeters(double value) {
    this.distanceInMeters = value;
  }

  /**
   * Gets the value of the 'durationInSeconds' field.
   * @return Simulated Time
   */
  public int getDurationInSeconds() {
    return durationInSeconds;
  }


  /**
   * Sets the value of the 'durationInSeconds' field.
   * Simulated Time
   * @param value the value to set.
   */
  public void setDurationInSeconds(int value) {
    this.durationInSeconds = value;
  }

  /**
   * Gets the value of the 'steps' field.
   * @return A simulated number of steps
   */
  public int getSteps() {
    return steps;
  }


  /**
   * Sets the value of the 'steps' field.
   * A simulated number of steps
   * @param value the value to set.
   */
  public void setSteps(int value) {
    this.steps = value;
  }

  /**
   * Gets the value of the 'floorsClimbed' field.
   * @return Simulated number of floors climbed
   */
  public int getFloorsClimbed() {
    return floorsClimbed;
  }


  /**
   * Sets the value of the 'floorsClimbed' field.
   * Simulated number of floors climbed
   * @param value the value to set.
   */
  public void setFloorsClimbed(int value) {
    this.floorsClimbed = value;
  }

  /**
   * Gets the value of the 'manufacturerName' field.
   * @return Name of upload device
   */
  public java.lang.CharSequence getManufacturerName() {
    return manufacturerName;
  }


  /**
   * Sets the value of the 'manufacturerName' field.
   * Name of upload device
   * @param value the value to set.
   */
  public void setManufacturerName(java.lang.CharSequence value) {
    this.manufacturerName = value;
  }

  /**
   * Gets the value of the 'userid' field.
   * @return The simulated user who sent the fitness data
   */
  public java.lang.CharSequence getUserid() {
    return userid;
  }


  /**
   * Sets the value of the 'userid' field.
   * The simulated user who sent the fitness data
   * @param value the value to set.
   */
  public void setUserid(java.lang.CharSequence value) {
    this.userid = value;
  }

  /**
   * Gets the value of the 'tenant_id' field.
   * @return The simulated tenant id
   */
  public int getTenantId() {
    return tenant_id;
  }


  /**
   * Sets the value of the 'tenant_id' field.
   * The simulated tenant id
   * @param value the value to set.
   */
  public void setTenantId(int value) {
    this.tenant_id = value;
  }

  /**
   * Creates a new FitnessEvent RecordBuilder.
   * @return A new FitnessEvent RecordBuilder
   */
  public static za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder newBuilder() {
    return new za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder();
  }

  /**
   * Creates a new FitnessEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FitnessEvent RecordBuilder
   */
  public static za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder newBuilder(za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder other) {
    if (other == null) {
      return new za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder();
    } else {
      return new za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder(other);
    }
  }

  /**
   * Creates a new FitnessEvent RecordBuilder by copying an existing FitnessEvent instance.
   * @param other The existing instance to copy.
   * @return A new FitnessEvent RecordBuilder
   */
  public static za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder newBuilder(za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent other) {
    if (other == null) {
      return new za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder();
    } else {
      return new za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for FitnessEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FitnessEvent>
    implements org.apache.avro.data.RecordBuilder<FitnessEvent> {

    /** Summary of data */
    private java.lang.CharSequence activityType;
    private long startTimeInSeconds;
    private double averageHeartRateInBeatsPerMinute;
    private int activeKilocalories;
    /** A simulated distance */
    private double distanceInMeters;
    /** Simulated Time */
    private int durationInSeconds;
    /** A simulated number of steps */
    private int steps;
    /** Simulated number of floors climbed */
    private int floorsClimbed;
    /** Name of upload device */
    private java.lang.CharSequence manufacturerName;
    /** The simulated user who sent the fitness data */
    private java.lang.CharSequence userid;
    /** The simulated tenant id */
    private int tenant_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.activityType)) {
        this.activityType = data().deepCopy(fields()[0].schema(), other.activityType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.startTimeInSeconds)) {
        this.startTimeInSeconds = data().deepCopy(fields()[1].schema(), other.startTimeInSeconds);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.averageHeartRateInBeatsPerMinute)) {
        this.averageHeartRateInBeatsPerMinute = data().deepCopy(fields()[2].schema(), other.averageHeartRateInBeatsPerMinute);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.activeKilocalories)) {
        this.activeKilocalories = data().deepCopy(fields()[3].schema(), other.activeKilocalories);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.distanceInMeters)) {
        this.distanceInMeters = data().deepCopy(fields()[4].schema(), other.distanceInMeters);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.durationInSeconds)) {
        this.durationInSeconds = data().deepCopy(fields()[5].schema(), other.durationInSeconds);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.steps)) {
        this.steps = data().deepCopy(fields()[6].schema(), other.steps);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.floorsClimbed)) {
        this.floorsClimbed = data().deepCopy(fields()[7].schema(), other.floorsClimbed);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.manufacturerName)) {
        this.manufacturerName = data().deepCopy(fields()[8].schema(), other.manufacturerName);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.userid)) {
        this.userid = data().deepCopy(fields()[9].schema(), other.userid);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.tenant_id)) {
        this.tenant_id = data().deepCopy(fields()[10].schema(), other.tenant_id);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing FitnessEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.activityType)) {
        this.activityType = data().deepCopy(fields()[0].schema(), other.activityType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.startTimeInSeconds)) {
        this.startTimeInSeconds = data().deepCopy(fields()[1].schema(), other.startTimeInSeconds);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.averageHeartRateInBeatsPerMinute)) {
        this.averageHeartRateInBeatsPerMinute = data().deepCopy(fields()[2].schema(), other.averageHeartRateInBeatsPerMinute);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.activeKilocalories)) {
        this.activeKilocalories = data().deepCopy(fields()[3].schema(), other.activeKilocalories);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.distanceInMeters)) {
        this.distanceInMeters = data().deepCopy(fields()[4].schema(), other.distanceInMeters);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.durationInSeconds)) {
        this.durationInSeconds = data().deepCopy(fields()[5].schema(), other.durationInSeconds);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.steps)) {
        this.steps = data().deepCopy(fields()[6].schema(), other.steps);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.floorsClimbed)) {
        this.floorsClimbed = data().deepCopy(fields()[7].schema(), other.floorsClimbed);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.manufacturerName)) {
        this.manufacturerName = data().deepCopy(fields()[8].schema(), other.manufacturerName);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.userid)) {
        this.userid = data().deepCopy(fields()[9].schema(), other.userid);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.tenant_id)) {
        this.tenant_id = data().deepCopy(fields()[10].schema(), other.tenant_id);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'activityType' field.
      * Summary of data
      * @return The value.
      */
    public java.lang.CharSequence getActivityType() {
      return activityType;
    }


    /**
      * Sets the value of the 'activityType' field.
      * Summary of data
      * @param value The value of 'activityType'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder setActivityType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.activityType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'activityType' field has been set.
      * Summary of data
      * @return True if the 'activityType' field has been set, false otherwise.
      */
    public boolean hasActivityType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'activityType' field.
      * Summary of data
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder clearActivityType() {
      activityType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTimeInSeconds' field.
      * @return The value.
      */
    public long getStartTimeInSeconds() {
      return startTimeInSeconds;
    }


    /**
      * Sets the value of the 'startTimeInSeconds' field.
      * @param value The value of 'startTimeInSeconds'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder setStartTimeInSeconds(long value) {
      validate(fields()[1], value);
      this.startTimeInSeconds = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'startTimeInSeconds' field has been set.
      * @return True if the 'startTimeInSeconds' field has been set, false otherwise.
      */
    public boolean hasStartTimeInSeconds() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'startTimeInSeconds' field.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder clearStartTimeInSeconds() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageHeartRateInBeatsPerMinute' field.
      * @return The value.
      */
    public double getAverageHeartRateInBeatsPerMinute() {
      return averageHeartRateInBeatsPerMinute;
    }


    /**
      * Sets the value of the 'averageHeartRateInBeatsPerMinute' field.
      * @param value The value of 'averageHeartRateInBeatsPerMinute'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder setAverageHeartRateInBeatsPerMinute(double value) {
      validate(fields()[2], value);
      this.averageHeartRateInBeatsPerMinute = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'averageHeartRateInBeatsPerMinute' field has been set.
      * @return True if the 'averageHeartRateInBeatsPerMinute' field has been set, false otherwise.
      */
    public boolean hasAverageHeartRateInBeatsPerMinute() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'averageHeartRateInBeatsPerMinute' field.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder clearAverageHeartRateInBeatsPerMinute() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'activeKilocalories' field.
      * @return The value.
      */
    public int getActiveKilocalories() {
      return activeKilocalories;
    }


    /**
      * Sets the value of the 'activeKilocalories' field.
      * @param value The value of 'activeKilocalories'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder setActiveKilocalories(int value) {
      validate(fields()[3], value);
      this.activeKilocalories = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'activeKilocalories' field has been set.
      * @return True if the 'activeKilocalories' field has been set, false otherwise.
      */
    public boolean hasActiveKilocalories() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'activeKilocalories' field.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder clearActiveKilocalories() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'distanceInMeters' field.
      * A simulated distance
      * @return The value.
      */
    public double getDistanceInMeters() {
      return distanceInMeters;
    }


    /**
      * Sets the value of the 'distanceInMeters' field.
      * A simulated distance
      * @param value The value of 'distanceInMeters'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder setDistanceInMeters(double value) {
      validate(fields()[4], value);
      this.distanceInMeters = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'distanceInMeters' field has been set.
      * A simulated distance
      * @return True if the 'distanceInMeters' field has been set, false otherwise.
      */
    public boolean hasDistanceInMeters() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'distanceInMeters' field.
      * A simulated distance
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder clearDistanceInMeters() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'durationInSeconds' field.
      * Simulated Time
      * @return The value.
      */
    public int getDurationInSeconds() {
      return durationInSeconds;
    }


    /**
      * Sets the value of the 'durationInSeconds' field.
      * Simulated Time
      * @param value The value of 'durationInSeconds'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder setDurationInSeconds(int value) {
      validate(fields()[5], value);
      this.durationInSeconds = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'durationInSeconds' field has been set.
      * Simulated Time
      * @return True if the 'durationInSeconds' field has been set, false otherwise.
      */
    public boolean hasDurationInSeconds() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'durationInSeconds' field.
      * Simulated Time
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder clearDurationInSeconds() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'steps' field.
      * A simulated number of steps
      * @return The value.
      */
    public int getSteps() {
      return steps;
    }


    /**
      * Sets the value of the 'steps' field.
      * A simulated number of steps
      * @param value The value of 'steps'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder setSteps(int value) {
      validate(fields()[6], value);
      this.steps = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'steps' field has been set.
      * A simulated number of steps
      * @return True if the 'steps' field has been set, false otherwise.
      */
    public boolean hasSteps() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'steps' field.
      * A simulated number of steps
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder clearSteps() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'floorsClimbed' field.
      * Simulated number of floors climbed
      * @return The value.
      */
    public int getFloorsClimbed() {
      return floorsClimbed;
    }


    /**
      * Sets the value of the 'floorsClimbed' field.
      * Simulated number of floors climbed
      * @param value The value of 'floorsClimbed'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder setFloorsClimbed(int value) {
      validate(fields()[7], value);
      this.floorsClimbed = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'floorsClimbed' field has been set.
      * Simulated number of floors climbed
      * @return True if the 'floorsClimbed' field has been set, false otherwise.
      */
    public boolean hasFloorsClimbed() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'floorsClimbed' field.
      * Simulated number of floors climbed
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder clearFloorsClimbed() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'manufacturerName' field.
      * Name of upload device
      * @return The value.
      */
    public java.lang.CharSequence getManufacturerName() {
      return manufacturerName;
    }


    /**
      * Sets the value of the 'manufacturerName' field.
      * Name of upload device
      * @param value The value of 'manufacturerName'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder setManufacturerName(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.manufacturerName = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'manufacturerName' field has been set.
      * Name of upload device
      * @return True if the 'manufacturerName' field has been set, false otherwise.
      */
    public boolean hasManufacturerName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'manufacturerName' field.
      * Name of upload device
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder clearManufacturerName() {
      manufacturerName = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'userid' field.
      * The simulated user who sent the fitness data
      * @return The value.
      */
    public java.lang.CharSequence getUserid() {
      return userid;
    }


    /**
      * Sets the value of the 'userid' field.
      * The simulated user who sent the fitness data
      * @param value The value of 'userid'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder setUserid(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.userid = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'userid' field has been set.
      * The simulated user who sent the fitness data
      * @return True if the 'userid' field has been set, false otherwise.
      */
    public boolean hasUserid() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'userid' field.
      * The simulated user who sent the fitness data
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder clearUserid() {
      userid = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'tenant_id' field.
      * The simulated tenant id
      * @return The value.
      */
    public int getTenantId() {
      return tenant_id;
    }


    /**
      * Sets the value of the 'tenant_id' field.
      * The simulated tenant id
      * @param value The value of 'tenant_id'.
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder setTenantId(int value) {
      validate(fields()[10], value);
      this.tenant_id = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'tenant_id' field has been set.
      * The simulated tenant id
      * @return True if the 'tenant_id' field has been set, false otherwise.
      */
    public boolean hasTenantId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'tenant_id' field.
      * The simulated tenant id
      * @return This builder.
      */
    public za.co.goldmine.kafka.streams.fitness_duplicate_detector.avro.FitnessEvent.Builder clearTenantId() {
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FitnessEvent build() {
      try {
        FitnessEvent record = new FitnessEvent();
        record.activityType = fieldSetFlags()[0] ? this.activityType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.startTimeInSeconds = fieldSetFlags()[1] ? this.startTimeInSeconds : (java.lang.Long) defaultValue(fields()[1]);
        record.averageHeartRateInBeatsPerMinute = fieldSetFlags()[2] ? this.averageHeartRateInBeatsPerMinute : (java.lang.Double) defaultValue(fields()[2]);
        record.activeKilocalories = fieldSetFlags()[3] ? this.activeKilocalories : (java.lang.Integer) defaultValue(fields()[3]);
        record.distanceInMeters = fieldSetFlags()[4] ? this.distanceInMeters : (java.lang.Double) defaultValue(fields()[4]);
        record.durationInSeconds = fieldSetFlags()[5] ? this.durationInSeconds : (java.lang.Integer) defaultValue(fields()[5]);
        record.steps = fieldSetFlags()[6] ? this.steps : (java.lang.Integer) defaultValue(fields()[6]);
        record.floorsClimbed = fieldSetFlags()[7] ? this.floorsClimbed : (java.lang.Integer) defaultValue(fields()[7]);
        record.manufacturerName = fieldSetFlags()[8] ? this.manufacturerName : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.userid = fieldSetFlags()[9] ? this.userid : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.tenant_id = fieldSetFlags()[10] ? this.tenant_id : (java.lang.Integer) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FitnessEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<FitnessEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FitnessEvent>
    READER$ = (org.apache.avro.io.DatumReader<FitnessEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.activityType);

    out.writeLong(this.startTimeInSeconds);

    out.writeDouble(this.averageHeartRateInBeatsPerMinute);

    out.writeInt(this.activeKilocalories);

    out.writeDouble(this.distanceInMeters);

    out.writeInt(this.durationInSeconds);

    out.writeInt(this.steps);

    out.writeInt(this.floorsClimbed);

    out.writeString(this.manufacturerName);

    out.writeString(this.userid);

    out.writeInt(this.tenant_id);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.activityType = in.readString(this.activityType instanceof Utf8 ? (Utf8)this.activityType : null);

      this.startTimeInSeconds = in.readLong();

      this.averageHeartRateInBeatsPerMinute = in.readDouble();

      this.activeKilocalories = in.readInt();

      this.distanceInMeters = in.readDouble();

      this.durationInSeconds = in.readInt();

      this.steps = in.readInt();

      this.floorsClimbed = in.readInt();

      this.manufacturerName = in.readString(this.manufacturerName instanceof Utf8 ? (Utf8)this.manufacturerName : null);

      this.userid = in.readString(this.userid instanceof Utf8 ? (Utf8)this.userid : null);

      this.tenant_id = in.readInt();

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.activityType = in.readString(this.activityType instanceof Utf8 ? (Utf8)this.activityType : null);
          break;

        case 1:
          this.startTimeInSeconds = in.readLong();
          break;

        case 2:
          this.averageHeartRateInBeatsPerMinute = in.readDouble();
          break;

        case 3:
          this.activeKilocalories = in.readInt();
          break;

        case 4:
          this.distanceInMeters = in.readDouble();
          break;

        case 5:
          this.durationInSeconds = in.readInt();
          break;

        case 6:
          this.steps = in.readInt();
          break;

        case 7:
          this.floorsClimbed = in.readInt();
          break;

        case 8:
          this.manufacturerName = in.readString(this.manufacturerName instanceof Utf8 ? (Utf8)this.manufacturerName : null);
          break;

        case 9:
          this.userid = in.readString(this.userid instanceof Utf8 ? (Utf8)this.userid : null);
          break;

        case 10:
          this.tenant_id = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










